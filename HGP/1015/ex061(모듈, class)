#내부모듈
#외부모듈(import)
###407p#####################################################################################################################
import random
# print("#random 모듈")

# # random(): 0.0 <= x < 1.0사이의 float을 리턴합니다.
# print("- random(): ", random.random())
#
# # uniform(min, max): 지정한 범위 사이의 float를 리턴합니다.
# print("- uniform(10, 20):", random.uniform(10, 20))
#
# # randrange(): 지정한 범위의 int를 리턴합니다.
# # - randrange(max) : 0부터 max 사이의 값을 리턴합니다.
# # - rnadrange(min, max) : min부터 max 사이의 값을 리턴합니다.
# print("- randrange(10):", random.randrange(10))
#
# # choice(list): 리스트 내부에 있는 요소를 랜덤하게 선택합니다.
# print("- choicd([1, 2, 3, 4, 5]):", random.choice([1, 2, 3, 4, 5]))
#
# # shuffle(list): 리스트의 요소들을 랜덤하게 섞습니다.
# print("- shuffle([1, 2, 3, 4, 5]):", random.shuffle([1, 2, 3, 4, 5]))
#
# # sample(list, k=<숫자>): 리스트의 요소 중에 k개를 뽑습니다.
# print("- sample([1, 2, 3, 4, 5], k = 2):", random.sample([1, 2, 3, 4, 5], k = 2))

###terminal실행#########################################################################################################
#cd 혼자공부하는 파이썬
#python ex061.py 10 20 30
# import sys
# print(sys.argv)
#=>['D:\\Code\\Python\\혼자공부하는파이썬\\ex055(numpy).py']
# print(sys.argv[0])
# print(sys.argv[1])
# print(sys.argv[2])
# print(sys.argv[3])
# # print(sys.argv[4])error
# print(type(sys.argv[1]))
# #=><class 'str'>
# print(int(sys.argv[1])+int(sys.argv[2])+int(sys.argv[3]))
# print(sys.getwindowsversion())
# print(sys.version)

###467p#################################################################################################################
# class Person(object):
#     pass
#
# class Student(Person):
#     #def __new__(self) : 진짜 생성자
#     def __init__(self, name, korean, math, english, science):#초기화(생성자)
#         # super.__init__()    #기본생성자
#         #super : 상위클래스
#         print("C-tor")
#         #self:주소
#         #self.name : 인스턴스 변수
#         self.name = name
#         self.korean = korean
#         self.math = math
#         self.english = english
#         self.science = science
#         #print(name)
#
#     def __del__(self):
#         #print(self.name)
#         self.name = ""
#         self.korean = 0
#         self.math = 0
#         self.english = 0
#         self.science = 0
#         print("D-tor")
#
# students = [
#     Student("윤인성", 87, 98, 88, 95),
#     Student("연하진", 92, 98, 96, 98),
#     Student("구지연", 76, 96, 94, 90),
#     Student("나선주", 98, 92, 96, 92),
#     Student("윤아린", 95, 98, 98, 98),
#     Student("윤영월", 64, 88, 92, 92)
# ]
# print(students)
#
# print(students[1].name)
# print(students[1].korean)
# print(students[1].math)
# print(students[1].english)
# print(students[1].science)

###469p#################################################################################################################
# class Student:
#     def __init__(self, name, korean, math, english, science):
#         self.name = name
#         self.korean = korean
#         self.math = math
#         self.english = english
#         self.science = science
#
#     def get_sum(self):
#         return self.korean + self.math +\
#             self.english + self.science
#
#     def get_average(self):
#         return self.get_sum()/4
#
#     def to_string(self):
#         return "{}\t{}\t{}".format(\
#             self.name,\
#             self.get_sum(),\
#             self.get_average())
#
# students = [
#     Student("윤인성", 87, 98, 88, 95),
#     Student("연하진", 92, 98, 96, 98),
#     Student("구지연", 76, 96, 94, 90),
#     Student("나선주", 98, 92, 96, 92),
#     Student("윤아린", 95, 98, 98, 98),
#     Student("윤영월", 64, 88, 92, 92)
# ]
#생성순서의 역순으로 사라짐
#
# print(" 이름", "총점", "평균", sep="\t")
# for student in students:
#     print(student.to_string())

###484p 자료 공유#########################################################################################################
class Student:
    count = 0 # self가 없으므로 class 변수(Java : static변수)

    def __init__(self, name, korean, math, english, science):
        self.name = name
        self.korean = korean
        self.math = math
        self.english = english
        self.science = science

        Student.count += 1
        print("{}번째 학생이 생성되었습니다.".format(Student.count))

        # @classmethod
        # def print(cls):
        #     print("클래스 내부 프린트")

students = [
    Student("윤인성", 87, 98, 88, 95),
    Student("연하진", 92, 98, 96, 98),
    Student("구지연", 76, 96, 94, 90),
    Student("나선주", 98, 92, 96, 92),
    Student("윤아린", 95, 98, 98, 98),
    Student("윤영월", 64, 88, 92, 92)
]

print()
print("현재 생성된 총 학생수는 {}명 입니다.".format(Student.count))
# Student.print()
