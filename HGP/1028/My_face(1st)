import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import keras
import tensorflow as tf

#내이미지 테스트하기

image = cv.imread("my_images/img01.jpg")#01~05이미지 깨짐?(heic->jpg변환)
cv.imshow("MY", image)
cv.waitKey(0)
# cv.destroyAllWindows()

#이미지를 리스트로 만들기
my_images = [] #빈리스트(이미지 넣어줄 예정)
my_images.clear() #초기화
for i in range(10):#5,6,7,8,9
    file = "./my_images/img{0:02d}.jpg".format(i + 1)
    # file = f"./my_images/img{i+1:02d}.jpg"
    image = cv.imread(file)
    image = cv.resize(image, (64, 64)) # 64 X 64 RGB
    image = cv.cvtColor(image, cv.COLOR_BGR2RGB) #BGR -> RGB change
    my_images.append(image)

print(my_images[1])

#이미지를 보는 함수
def show_image(row, col, images):
    (_, ax) = plt.subplots(row, col, figsize = (row, col))#첫번째 객체는 사용하지 않고 두번째 객체(ax)로만 언패킹하기
    for i in range(row):
        for j in range(col):
            if row <= 1:
                axis = ax[j]
            else:
                axis = ax[i, j]
                axis.get_xaxis().set_visible(False)#눈금(?) 없애주기
                axis.get_yaxis().set_visible(False)#눈금(?) 없애주기
                axis.imshow(images[i * col + j])
    plt.show()

show_image(2, 5, my_images)
#0, 1, 2, 3, 4,
#5, 9(전신사진)
#6, 7, 8=>두명

#다른사람 얼굴
face_images = [] # 빈리스트(이미지 넣어줄 예정)
face_images.clear()
for i in range(10):
    file = "./faces/img{0:02d}.jpg".format(i + 1)
    image = cv.imread(file)
    image = cv.resize(image, (64, 64)) # 64 X 64 RGB -> BGR순서
    image = cv.cvtColor(image, cv.COLOR_BGR2RGB) #BGR => RGB로 변경하기
    face_images.append(image)

print(face_images[1])

#이미지 보는 함수
def show_image(row, col, images):
    (_, ax) = plt.subplots(row, col, figsize = (row, col))
    for i in range(row):
        for j in range(col):
            if row <= 1:
                axis = ax[j]
            else:
                axis = ax[i, j]
                axis.get_xaxis().set_visible(False)
                axis.get_yaxis().set_visible(False)
                axis.imshow(images[i * col + j])
    plt.show()

show_image(2, 5, face_images)

#학습시키기
#1. 레이블 만들기(정답표)
y = [(1, 0)] * len(my_images) + [(0, 1)] * len(face_images)

print(y)

y = np.array(y) #넘파이 배열로 변환
print(y)

#입력데이터(train data)
X = my_images + face_images
print(X)
print(len(X))

X_train = np.array(X)   # 넘파이 배열로 변환
print(X_train.dtype)

#Valueerror 오류나서 추가
X_train = X_train.astype("float32")
X_train = X_train /255.0 #정규화
X_train - X_train

print(X_train.shape)

# 학습할 모델 만들기
model = keras.Sequential(name = "FACE_DETECTOR")
model.add(keras.layers.Input(shape=(64, 64, 3)))
#Convolution : Correlation
model.add(keras.layers.Conv2D(128, (3, 3), activation = "relu"))
model.add(keras.layers.MaxPooling2D(pool_size = (2, 2), strides = 2))
model.add(keras.layers.Conv2D(64, (3, 3), activation = "relu"))
model.add(keras.layers.MaxPooling2D(pool_size = (2, 2), strides = 2))
model.add(keras.layers.Conv2D(32, (3, 3), activation = "relu"))
model.add(keras.layers.MaxPooling2D(pool_size = (2, 2), strides = 2))
model.add(keras.layers.Conv2D(32, (3, 3), activation = "relu"))
model.add(keras.layers.MaxPooling2D(pool_size = (2, 2), strides = 2))
#DNN
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(64, activation = "relu"))
model.add(keras.layers.Dense(64, activation = "relu"))
model.add(keras.layers.Dense(32, activation = "relu"))
model.add(keras.layers.Dense(2, activation = "softmax"))
# model.add(keras.layers.Dense(1, activation = "sigmoid"))#(254p : 출력노드가 하나)

model.summary()

model.compile(optimizer = "adam", loss = "categorical_crossentropy", metrics = ["categorical_accuracy"])#sparse_categorical_crossentropy(라벨이 정수 인덱스)
#categorical_crossentropy(라벨이 원-핫 인코딩)


history = model.fit(X_train, y, epochs = 200)
# plt.plot(history.history['loss'])
# plt.plot(history.history['val_loss'])
model.save("MY_DETECTOR.keras")


test2_images = []
test2_images.clear()
for i in range(10):
    file = "./test2_images/img{0:02d}.jpg".format(i + 1)
    image = cv.imread(file)
    if image is None:
        print("이미지 없음 ", i)
        continue
    else:
        image = cv.resize(image, (64, 64))  # 64 X 64 RGB -> BGR순서
    image = cv.cvtColor(image, cv.COLOR_BGR2RGB)    #BGR -> RGB로 변경하기
    test2_images.append(image)

def show_image(row, col, images):
    (_, ax) = plt.subplots(row, col, figsize = (row, col))
    for i in range(row):
        for j in range(col):
            if row <= 1:
                axis = ax[j]
            else:
                axis = ax[i, j]
                axis.get_xaxis().set_visible(False)
                axis.get_yaxis().set_visible(False)
                axis.imshow(images[i * col + j])
    plt.show()

show_image(2, 5, test2_images)
test2_images = np.array(test2_images) / 255.0
test2_images - test2_images.astype('float32')
# 모델 불러오기
cnn_model = keras.models.load_model("MY_DETECTOR.keras")
#예측
predictions = cnn_model.predict(test2_images)

#결과 출력
print(predictions.round(3))
